name: Build and deploy .NET application to container app aberatechserver-app-202412211749
on:
  push:
    branches:
      - dev
env:
  CONTAINER_APP_CONTAINER_NAME: aberatechserver
  CONTAINER_APP_NAME: aberatechserver-app-202412211749
  CONTAINER_APP_RESOURCE_GROUP_NAME: aberatechserver-app-202412211749ResourceGroup
  CONTAINER_REGISTRY_LOGIN_SERVER: aberatechserver20241221175455.azurecr.io
  DOCKER_FILE_PATH: aberaTech.Server/Dockerfile
  PROJECT_NAME_FOR_DOCKER: aberatechserver
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the Repository
      - name: Checkout Source Code
        uses: actions/checkout@v4

      # Step 2: Set up Docker Buildx
      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Log in to Azure Container Registry (ACR)
      - name: Log in to Azure Container Registry (ACR)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.CONTAINER_REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.aberaTechServer20241221175455_USERNAME_6123 }}
          password: ${{ secrets.aberaTechServer20241221175455_PASSWORD_6123 }}

      # Step 4: Build and push Docker image to ACR
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ env.CONTAINER_REGISTRY_LOGIN_SERVER }}/${{ env.PROJECT_NAME_FOR_DOCKER }}:${{ github.sha }}
          file: ${{ env.DOCKER_FILE_PATH }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Step 5: Azure CLI Login with Federated Credentials
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      # Step 6: Deploy the Container App with ACR Credentials
      - name: Deploy to Azure Container App
        uses: azure/CLI@v2
        with:
          inlineScript: |
            # Enable dynamic installation for Azure CLI extensions
            az config set extension.use_dynamic_install=yes_without_prompt

            # Integrate ACR credentials with the Container App
            az containerapp registry set --name ${{ env.CONTAINER_APP_NAME }} \
              --resource-group ${{ env.CONTAINER_APP_RESOURCE_GROUP_NAME }} \
              --server ${{ env.CONTAINER_REGISTRY_LOGIN_SERVER }} \
              --username ${{ secrets.aberaTechServer20241221175455_USERNAME_6123 }} \
              --password ${{ secrets.aberaTechServer20241221175455_PASSWORD_6123 }}

            # Update the Container App with the new Docker image
            az containerapp update --name ${{ env.CONTAINER_APP_NAME }} \
              --container-name ${{ env.CONTAINER_APP_CONTAINER_NAME }} \
              --resource-group ${{ env.CONTAINER_APP_RESOURCE_GROUP_NAME }} \
              --image ${{ env.CONTAINER_REGISTRY_LOGIN_SERVER }}/${{ env.PROJECT_NAME_FOR_DOCKER }}:${{ github.sha }}

      # Step 7: Azure Logout
      - name: Logout from Azure
        run: az logout
